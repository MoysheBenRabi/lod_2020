In [2]: #tr
   ...: import numpy as np
   ...: from keras import models, layers
   ...: from keras.utils import to_categorical
   ...: folder = r'./'
   ...: def load_np():
   ...:     npa = np.load(folder + r'\train1.npy')
   ...:     npi = np.load(folder + r'\train1_i.npy')
   ...:     return npa, npi
   ...:
   ...: #npb = None
   ...: #network = None
   ...: def make_net(npa):
   ...:     network = models.Sequential()
   ...:     network.add(layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True,
   ...:                 input_shape=(len(npa[0]),)))
   ...:     network.add(layers.Dense(1024, activation='relu')) # 81, 106
   ...:     network.add(layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True))
   ...:     network.add(layers.Dense(256, activation='relu'))
   ...:     network.add(layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True))
   ...:     network.add(layers.Dense(2, activation='softmax'))
   ...:     network.compile(optimizer='rmsprop',
   ...:                     loss = 'categorical_crossentropy',
   ...:                     metrics = ['accuracy'])
   ...:     return network
   ...:
   ...: def fit(network, npa, npb):
   ...:     npb = to_categorical(npi)
   ...:     network.fit(npa, npb, epochs=5, batch_size=128)
   ...:
   ...: npa, npi = load_np()
   ...: npa_t = np.load(folder + r'\train1_test.npy')
   ...: npi_t = to_categorical( np.load(folder + r'\train1_i_test.npy') )
   ...: network = make_net(npa)
   ...: fit(network, npa, npi)
   ...: network.save_weights('netw5.weights')
   ...: #network = load_net(npa_t)
   ...: #network.load_weights('net1.weights')
   ...: loss, acc = network.evaluate(npa_t, npi_t)
   ...: print(loss, acc)
   ...: #npi[0:100]
   ...: #print(network){
2019-11-30 04:37:03.560645: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2019-11-30 04:37:04.380465: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties:
name: GeForce MX230 major: 6 minor: 1 memoryClockRate(GHz): 1.531
pciBusID: 0000:01:00.0
2019-11-30 04:37:04.385604: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically linked, skip dlopen check.
2019-11-30 04:37:04.390897: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-11-30 04:37:04.397534: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2019-11-30 04:37:04.407927: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties:
name: GeForce MX230 major: 6 minor: 1 memoryClockRate(GHz): 1.531
pciBusID: 0000:01:00.0
2019-11-30 04:37:04.414562: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically linked, skip dlopen check.
2019-11-30 04:37:04.419990: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2019-11-30 04:37:07.037208: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-11-30 04:37:07.041142: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0
2019-11-30 04:37:07.042635: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N
2019-11-30 04:37:07.054583: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1360 MB memory) -> physical GPU (device: 0, name: GeForce MX230, pci bus id: 0000:01:00.0, compute capability: 6.1)
Epoch 1/5
2019-11-30 04:37:09.557921: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
8000000/8000000 [==============================] - 570s 71us/step - loss: 0.6703 - accuracy: 0.5912
Epoch 2/5
8000000/8000000 [==============================] - 575s 72us/step - loss: 0.6684 - accuracy: 0.5933
Epoch 3/5
8000000/8000000 [==============================] - 565s 71us/step - loss: 0.6682 - accuracy: 0.5934
Epoch 4/5
8000000/8000000 [==============================] - 579s 72us/step - loss: 0.6682 - accuracy: 0.5936
Epoch 5/5
8000000/8000000 [==============================] - 564s 71us/step - loss: 0.6681 - accuracy: 0.5937
921484/921484 [==============================] - 83s 90us/step
0.6679681568122963 0.5944411158561707